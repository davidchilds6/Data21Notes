# Problem 1 Sum of multiples of 3 and 5 up to 1000

list_of_multiples = [i for i in range(1000) if i % 3 == 0 or i % 5 == 0]
print(sum(list_of_multiples))

# Problem 2:
#
# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms.

n1, n2 = 1, 2
count = 0
while n1 <= 4000000:
    if n1 % 2 == 0:
        count += n1
    n1, n2 = n2, n1+n2
print(count)

# Problem 3:
# 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
#
# What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

list = []
# Creates list of numbers we want to find the lowest common multiple of.
for i in range(2,21):
    list.append(i)

for i in range(0, len(list)):
    for j in range(1, i+1):
        if list[i] % list[i-j] == 0:
            list[i] = int(list[i] / list[i-j])

answer = 1

for i in range(0, len(list)):
    answer = answer * list[i]

print(answer)
# same but using math import
import math


def lcm(n):  # Returns the lcm of first n numbers
    ans = 1
    for i in range(1, n + 1):
        ans = int((ans * i)/math.gcd(ans, i))
    return ans


# main
n = 20
print (lcm(n))

# Problem 4:
#
# The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
#
# Find the sum of all the primes below two million.

# # Create empty list
# prime_numbers = []
# for num in range(2, 2000):
#     prime = True
#     for i in range(2, num):
#         if num % i == 0:
#             prime = False
#     if prime is True:
#         prime_numbers.append(num)
#
# print(sum(prime_numbers))
# # Takes forever but it will produce the right answer, reduce the range down from 2mil

# # import math
# prime_numbers = [2]
# for num in range(3, 2000001, 2):
#     if all(num % i != 0 for i in range(3, int(math.sqrt(num))+1, 2)):
#         prime_numbers.append(num)
# print(sum(prime_numbers))
# # ans equals

# Problem 5:
# If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
#
# If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?
#
# NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters.
# The use of "and" when writing out numbers is in compliance with British usage.

from num2words import num2words

list_of_nums = []
for number in range(1, 1001):
    num = num2words(number).replace("-", "").replace(" ", "")
    list_of_nums.append(num)
# print("\n".join(list_of_nums))
print(sum(len(i) for i in list_of_nums))

# Problem 6:
# In the United Kingdom the currency is made up of pound (£) and pence (p). There are eight coins in general circulation:
#
# 1p, 2p, 5p, 10p, 20p, 50p, £1 (100p), and £2 (200p).
# It is possible to make £2 in the following way:
#
# 1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p
# How many different ways can £2 be made using any number of coins?

target = 200
coins = [1, 2, 5, 10, 20, 50, 100, 200]